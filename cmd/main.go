// package main ...
package main

import (
	"context"
	"flag"
	"os"
	"os/signal"
	"syscall"

	"github.com/sirupsen/logrus"

	_ "github.com/IgorRybak2055/logistic-service/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/IgorRybak2055/logistic-service/internal/logistic"
	"github.com/IgorRybak2055/logistic-service/internal/storage"
	"github.com/IgorRybak2055/logistic-service/pkg/config"
	"github.com/IgorRybak2055/logistic-service/pkg/email"
	"github.com/IgorRybak2055/logistic-service/pkg/services"
)

// @title Ragger API
// @version 1.0
// @description This is a sample service ...
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.email support@ragger.com
// @host localhost:8100
// @BasePath /
// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization
func main() {
	flag.Parse()

	log := logrus.New()
	log.SetFormatter(&logrus.JSONFormatter{})

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	cfg, err := config.NewConfig(ctx)
	if err != nil {
		log.Error(err)
		return
	}

	sendToEmailCh := make(chan email.MessageData, 2)

	app := logistic.New(cfg.HTTP, sendToEmailCh)

	// TODO: we don't need somethi
	srvs := services.NewServices(log)

	srvs.Run(10, 10, func() error {
		conn, err := storage.Connect(cfg.DB.Postgres(), log)
		if err != nil {
			log.Error(err)
			return err
		}
		app.DBC = conn
		log.Info("database connection established")

		<-ctx.Done()
		if err := conn.Close(); err != nil {
			log.Error(err)
		}
		return nil
	})

	emailService := email.New(cfg.Mail, sendToEmailCh)

	go emailService.Run()

	srvs.Run(2, 10, func() error {
		return app.Start()
	})

	stop := make(chan os.Signal, 1)
	signal.Notify(stop, os.Interrupt)
	signal.Notify(stop, syscall.SIGTERM)

	<-stop

	if err := app.Srv.Shutdown(ctx); err != nil {
		log.Printf("error shutting down server %s", err)
	} else {
		log.Println("server gracefully stopped")
	}
}
